// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CheckSome blurring the fields sets the touched prop for fields 1`] = `
<CheckSome
  rules={
    Object {
      "requiredString": Array [
        [Function],
      ],
      "testNumber": Array [
        [Function],
        [Function],
      ],
    }
  }
  values={
    Object {
      "optionalString": "",
      "requiredString": "",
      "testNumber": undefined,
    }
  }
>
  <TestForm
    changed={false}
    errors={
      Object {
        "requiredString": Object {
          "required": Object {},
        },
        "testNumber": Object {
          "required": Object {},
        },
      }
    }
    valid={false}
  >
    <form>
      <div>
        Form 
        Invalid
      </div>
      <div>
        Unchanged
      </div>
      <div>
        Form Errors: 
        {"requiredString":{"required":{}},"testNumber":{"required":{}}}
      </div>
      <CheckSomeField
        name="requiredString"
      >
        <div
          className="CheckSomeField"
          onBlur={[Function]}
        >
          <TestField
            errors={
              Object {
                "required": Object {},
              }
            }
            touched={true}
            valid={false}
            value=""
          >
            <div
              className="field"
            >
              <input
                defaultValue=""
              />
              <div>
                Field 
                Invalid
              </div>
              <div>
                Touched
              </div>
              <div>
                Field Errors: 
                {"required":{}}
              </div>
            </div>
          </TestField>
        </div>
      </CheckSomeField>
      <CheckSomeField
        name="testNumber"
      >
        <div
          className="CheckSomeField"
          onBlur={[Function]}
        >
          <TestField
            errors={
              Object {
                "required": Object {},
              }
            }
            touched={true}
            valid={false}
          >
            <div
              className="field"
            >
              <input />
              <div>
                Field 
                Invalid
              </div>
              <div>
                Touched
              </div>
              <div>
                Field Errors: 
                {"required":{}}
              </div>
            </div>
          </TestField>
        </div>
      </CheckSomeField>
      <CheckSomeField
        name="optionalString"
      >
        <div
          className="CheckSomeField"
          onBlur={[Function]}
        >
          <TestField
            touched={true}
            valid={true}
            value=""
          >
            <div
              className="field"
            >
              <input
                defaultValue=""
              />
              <div>
                Field 
                Valid
              </div>
              <div>
                Touched
              </div>
              <div>
                Field Errors: 
              </div>
            </div>
          </TestField>
        </div>
      </CheckSomeField>
    </form>
  </TestForm>
</CheckSome>
`;

exports[`CheckSome renders the initial form 1`] = `
<CheckSome
  rules={
    Object {
      "requiredString": Array [
        [Function],
      ],
      "testNumber": Array [
        [Function],
        [Function],
      ],
    }
  }
  values={
    Object {
      "optionalString": "",
      "requiredString": "",
      "testNumber": undefined,
    }
  }
>
  <TestForm
    changed={false}
    errors={
      Object {
        "requiredString": Object {
          "required": Object {},
        },
        "testNumber": Object {
          "required": Object {},
        },
      }
    }
    valid={false}
  >
    <form>
      <div>
        Form 
        Invalid
      </div>
      <div>
        Unchanged
      </div>
      <div>
        Form Errors: 
        {"requiredString":{"required":{}},"testNumber":{"required":{}}}
      </div>
      <CheckSomeField
        name="requiredString"
      >
        <div
          className="CheckSomeField"
          onBlur={[Function]}
        >
          <TestField
            errors={
              Object {
                "required": Object {},
              }
            }
            touched={false}
            valid={false}
            value=""
          >
            <div
              className="field"
            >
              <input
                defaultValue=""
              />
              <div>
                Field 
                Invalid
              </div>
              <div>
                Pristine
              </div>
              <div>
                Field Errors: 
                {"required":{}}
              </div>
            </div>
          </TestField>
        </div>
      </CheckSomeField>
      <CheckSomeField
        name="testNumber"
      >
        <div
          className="CheckSomeField"
          onBlur={[Function]}
        >
          <TestField
            errors={
              Object {
                "required": Object {},
              }
            }
            touched={false}
            valid={false}
          >
            <div
              className="field"
            >
              <input />
              <div>
                Field 
                Invalid
              </div>
              <div>
                Pristine
              </div>
              <div>
                Field Errors: 
                {"required":{}}
              </div>
            </div>
          </TestField>
        </div>
      </CheckSomeField>
      <CheckSomeField
        name="optionalString"
      >
        <div
          className="CheckSomeField"
          onBlur={[Function]}
        >
          <TestField
            touched={false}
            valid={true}
            value=""
          >
            <div
              className="field"
            >
              <input
                defaultValue=""
              />
              <div>
                Field 
                Valid
              </div>
              <div>
                Pristine
              </div>
              <div>
                Field Errors: 
              </div>
            </div>
          </TestField>
        </div>
      </CheckSomeField>
    </form>
  </TestForm>
</CheckSome>
`;

exports[`CheckSome setting values to something still invalid updates changed, values, and errors 1`] = `
<CheckSome
  rules={
    Object {
      "requiredString": Array [
        [Function],
      ],
      "testNumber": Array [
        [Function],
        [Function],
      ],
    }
  }
  values={
    Object {
      "optionalString": "patrick",
      "requiredString": "spongebob",
      "testNumber": -2,
    }
  }
>
  <TestForm
    changed={true}
    errors={
      Object {
        "testNumber": Object {
          "greaterThanZero": Object {
            "value": -2,
          },
        },
      }
    }
    valid={false}
  >
    <form>
      <div>
        Form 
        Invalid
      </div>
      <div>
        Changed
      </div>
      <div>
        Form Errors: 
        {"testNumber":{"greaterThanZero":{"value":-2}}}
      </div>
      <CheckSomeField
        name="requiredString"
      >
        <div
          className="CheckSomeField"
          onBlur={[Function]}
        >
          <TestField
            touched={false}
            valid={true}
            value="spongebob"
          >
            <div
              className="field"
            >
              <input
                defaultValue="spongebob"
              />
              <div>
                Field 
                Valid
              </div>
              <div>
                Pristine
              </div>
              <div>
                Field Errors: 
              </div>
            </div>
          </TestField>
        </div>
      </CheckSomeField>
      <CheckSomeField
        name="testNumber"
      >
        <div
          className="CheckSomeField"
          onBlur={[Function]}
        >
          <TestField
            errors={
              Object {
                "greaterThanZero": Object {
                  "value": -2,
                },
              }
            }
            touched={false}
            valid={false}
            value={-2}
          >
            <div
              className="field"
            >
              <input
                defaultValue={-2}
              />
              <div>
                Field 
                Invalid
              </div>
              <div>
                Pristine
              </div>
              <div>
                Field Errors: 
                {"greaterThanZero":{"value":-2}}
              </div>
            </div>
          </TestField>
        </div>
      </CheckSomeField>
      <CheckSomeField
        name="optionalString"
      >
        <div
          className="CheckSomeField"
          onBlur={[Function]}
        >
          <TestField
            touched={false}
            valid={true}
            value="patrick"
          >
            <div
              className="field"
            >
              <input
                defaultValue="patrick"
              />
              <div>
                Field 
                Valid
              </div>
              <div>
                Pristine
              </div>
              <div>
                Field Errors: 
              </div>
            </div>
          </TestField>
        </div>
      </CheckSomeField>
    </form>
  </TestForm>
</CheckSome>
`;

exports[`CheckSome setting values to something valid updates changed, values, and errors 1`] = `
<CheckSome
  rules={
    Object {
      "requiredString": Array [
        [Function],
      ],
      "testNumber": Array [
        [Function],
        [Function],
      ],
    }
  }
  values={
    Object {
      "optionalString": "patrick",
      "requiredString": "spongebob",
      "testNumber": 7,
    }
  }
>
  <TestForm
    changed={true}
    errors={null}
    valid={true}
  >
    <form>
      <div>
        Form 
        Valid
      </div>
      <div>
        Changed
      </div>
      <div>
        Form Errors: 
        null
      </div>
      <CheckSomeField
        name="requiredString"
      >
        <div
          className="CheckSomeField"
          onBlur={[Function]}
        >
          <TestField
            errors={null}
            touched={false}
            valid={true}
            value="spongebob"
          >
            <div
              className="field"
            >
              <input
                defaultValue="spongebob"
              />
              <div>
                Field 
                Valid
              </div>
              <div>
                Pristine
              </div>
              <div>
                Field Errors: 
                null
              </div>
            </div>
          </TestField>
        </div>
      </CheckSomeField>
      <CheckSomeField
        name="testNumber"
      >
        <div
          className="CheckSomeField"
          onBlur={[Function]}
        >
          <TestField
            errors={null}
            touched={false}
            valid={true}
            value={7}
          >
            <div
              className="field"
            >
              <input
                defaultValue={7}
              />
              <div>
                Field 
                Valid
              </div>
              <div>
                Pristine
              </div>
              <div>
                Field Errors: 
                null
              </div>
            </div>
          </TestField>
        </div>
      </CheckSomeField>
      <CheckSomeField
        name="optionalString"
      >
        <div
          className="CheckSomeField"
          onBlur={[Function]}
        >
          <TestField
            errors={null}
            touched={false}
            valid={true}
            value="patrick"
          >
            <div
              className="field"
            >
              <input
                defaultValue="patrick"
              />
              <div>
                Field 
                Valid
              </div>
              <div>
                Pristine
              </div>
              <div>
                Field Errors: 
                null
              </div>
            </div>
          </TestField>
        </div>
      </CheckSomeField>
    </form>
  </TestForm>
</CheckSome>
`;
